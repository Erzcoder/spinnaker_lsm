// Generated by gencpp from file spinn_ros_msgs/myo_two_motor.msg
// DO NOT EDIT!


#ifndef SPINN_ROS_MSGS_MESSAGE_MYO_TWO_MOTOR_H
#define SPINN_ROS_MSGS_MESSAGE_MYO_TWO_MOTOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace spinn_ros_msgs
{
template <class ContainerAllocator>
struct myo_two_motor_
{
  typedef myo_two_motor_<ContainerAllocator> Type;

  myo_two_motor_()
    : motor12(0)
    , motor13(0)  {
    }
  myo_two_motor_(const ContainerAllocator& _alloc)
    : motor12(0)
    , motor13(0)  {
  (void)_alloc;
    }



   typedef int32_t _motor12_type;
  _motor12_type motor12;

   typedef int32_t _motor13_type;
  _motor13_type motor13;




  typedef boost::shared_ptr< ::spinn_ros_msgs::myo_two_motor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spinn_ros_msgs::myo_two_motor_<ContainerAllocator> const> ConstPtr;

}; // struct myo_two_motor_

typedef ::spinn_ros_msgs::myo_two_motor_<std::allocator<void> > myo_two_motor;

typedef boost::shared_ptr< ::spinn_ros_msgs::myo_two_motor > myo_two_motorPtr;
typedef boost::shared_ptr< ::spinn_ros_msgs::myo_two_motor const> myo_two_motorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spinn_ros_msgs::myo_two_motor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spinn_ros_msgs::myo_two_motor_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace spinn_ros_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'spinn_ros_msgs': ['/home/roboy/workspace/spinnaker_lsm/src/spinn_ros_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::spinn_ros_msgs::myo_two_motor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spinn_ros_msgs::myo_two_motor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spinn_ros_msgs::myo_two_motor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spinn_ros_msgs::myo_two_motor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spinn_ros_msgs::myo_two_motor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spinn_ros_msgs::myo_two_motor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spinn_ros_msgs::myo_two_motor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "75c49627f14ffaf419e9c93c066a7e70";
  }

  static const char* value(const ::spinn_ros_msgs::myo_two_motor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x75c49627f14ffaf4ULL;
  static const uint64_t static_value2 = 0x19e9c93c066a7e70ULL;
};

template<class ContainerAllocator>
struct DataType< ::spinn_ros_msgs::myo_two_motor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spinn_ros_msgs/myo_two_motor";
  }

  static const char* value(const ::spinn_ros_msgs::myo_two_motor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spinn_ros_msgs::myo_two_motor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 motor12\n\
int32 motor13\n\
";
  }

  static const char* value(const ::spinn_ros_msgs::myo_two_motor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spinn_ros_msgs::myo_two_motor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motor12);
      stream.next(m.motor13);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct myo_two_motor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spinn_ros_msgs::myo_two_motor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spinn_ros_msgs::myo_two_motor_<ContainerAllocator>& v)
  {
    s << indent << "motor12: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motor12);
    s << indent << "motor13: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motor13);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPINN_ROS_MSGS_MESSAGE_MYO_TWO_MOTOR_H
